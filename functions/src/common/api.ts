/* tslint:disable */
/* eslint-disable */
/**
 * Corbado generic API entities
 * Overview of all Corbado generic API entities.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@corbado.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AllTypes
 */
export interface AllTypes {
    /**
     * 
     * @type {Paging}
     * @memberof AllTypes
     */
    'p1'?: Paging;
    /**
     * 
     * @type {ClientInfo}
     * @memberof AllTypes
     */
    'p2'?: ClientInfo;
    /**
     * generic ID
     * @type {string}
     * @memberof AllTypes
     */
    'p3'?: string;
    /**
     * ID of the user
     * @type {string}
     * @memberof AllTypes
     */
    'p4'?: string;
    /**
     * ID of the email
     * @type {string}
     * @memberof AllTypes
     */
    'p5'?: string;
    /**
     * ID of the email magic link
     * @type {string}
     * @memberof AllTypes
     */
    'p6'?: string;
    /**
     * ID of the phone number
     * @type {string}
     * @memberof AllTypes
     */
    'p7'?: string;
    /**
     * Timestamp of when the entity was created in yyyy-MM-dd\'T\'HH:mm:ss format
     * @type {string}
     * @memberof AllTypes
     */
    'p8'?: string;
    /**
     * Timestamp of when the entity was last updated in yyyy-MM-dd\'T\'HH:mm:ss format
     * @type {string}
     * @memberof AllTypes
     */
    'p9'?: string;
    /**
     * Timestamp of when the entity was deleted in yyyy-MM-dd\'T\'HH:mm:ss format
     * @type {string}
     * @memberof AllTypes
     */
    'p10'?: string;
    /**
     * ID of the device
     * @type {string}
     * @memberof AllTypes
     */
    'p11'?: string;
    /**
     * Additional payload in JSON format
     * @type {string}
     * @memberof AllTypes
     */
    'p12'?: string;
    /**
     * 
     * @type {Status}
     * @memberof AllTypes
     */
    'p13'?: Status;
    /**
     * ID of project
     * @type {string}
     * @memberof AllTypes
     */
    'p14'?: string;
    /**
     * Unique ID of request, you can provide your own while making the request, if not the ID will be randomly generated on server side
     * @type {string}
     * @memberof AllTypes
     */
    'p15'?: string;
    /**
     * 
     * @type {ErrorRsp}
     * @memberof AllTypes
     */
    'p16'?: ErrorRsp;
    /**
     * 
     * @type {Array<AuthMethod>}
     * @memberof AllTypes
     */
    'p17'?: Array<AuthMethod>;
    /**
     * 
     * @type {FullUser}
     * @memberof AllTypes
     */
    'p18'?: FullUser;
    /**
     * 
     * @type {LoginIdentifierType}
     * @memberof AllTypes
     */
    'p19'?: LoginIdentifierType;
    /**
     * ID of the email OTP
     * @type {string}
     * @memberof AllTypes
     */
    'p20'?: string;
    /**
     * 
     * @type {AppType}
     * @memberof AllTypes
     */
    'p21'?: AppType;
    /**
     * 
     * @type {SessionManagement}
     * @memberof AllTypes
     */
    'p22'?: SessionManagement;
    /**
     * 
     * @type {HighEntropyValues}
     * @memberof AllTypes
     */
    'p23'?: HighEntropyValues;
    /**
     * 
     * @type {LoginIdentifierConfig}
     * @memberof AllTypes
     */
    'p24'?: LoginIdentifierConfig;
    /**
     * 
     * @type {SocialProviderType}
     * @memberof AllTypes
     */
    'p25'?: SocialProviderType;
    /**
     * 
     * @type {IdentifierType}
     * @memberof AllTypes
     */
    'p26'?: IdentifierType;
}


/**
 * Application type
 * @export
 * @enum {string}
 */

export const AppType = {
    Empty: 'empty',
    Web: 'web',
    Native: 'native'
} as const;

export type AppType = typeof AppType[keyof typeof AppType];


/**
 * Authentication methods
 * @export
 * @enum {string}
 */

export const AuthMethod = {
    Email: 'email',
    PhoneNumber: 'phone_number',
    Webauthn: 'webauthn',
    Password: 'password'
} as const;

export type AuthMethod = typeof AuthMethod[keyof typeof AuthMethod];


/**
 * 
 * @export
 * @interface ClientInfo
 */
export interface ClientInfo {
    /**
     * client\'s IP address
     * @type {string}
     * @memberof ClientInfo
     */
    'remoteAddress': string;
    /**
     * client\'s User Agent
     * @type {string}
     * @memberof ClientInfo
     */
    'userAgent': string;
}
/**
 * 
 * @export
 * @interface ErrorRsp
 */
export interface ErrorRsp {
    /**
     * HTTP status code of operation
     * @type {number}
     * @memberof ErrorRsp
     */
    'httpStatusCode': number;
    /**
     * 
     * @type {string}
     * @memberof ErrorRsp
     */
    'message': string;
    /**
     * 
     * @type {RequestData}
     * @memberof ErrorRsp
     */
    'requestData': RequestData;
    /**
     * Runtime in seconds for this request
     * @type {number}
     * @memberof ErrorRsp
     */
    'runtime': number;
    /**
     * 
     * @type {object}
     * @memberof ErrorRsp
     */
    'data'?: object;
    /**
     * 
     * @type {ErrorRspAllOfError}
     * @memberof ErrorRsp
     */
    'error': ErrorRspAllOfError;
}
/**
 * 
 * @export
 * @interface ErrorRspAllOfError
 */
export interface ErrorRspAllOfError {
    /**
     * Type of error
     * @type {string}
     * @memberof ErrorRspAllOfError
     */
    'type': string;
    /**
     * Details of error
     * @type {string}
     * @memberof ErrorRspAllOfError
     */
    'details'?: string;
    /**
     * Validation errors per field
     * @type {Array<ErrorRspAllOfErrorValidation>}
     * @memberof ErrorRspAllOfError
     */
    'validation'?: Array<ErrorRspAllOfErrorValidation>;
    /**
     * Additional links to help understand the error
     * @type {Array<string>}
     * @memberof ErrorRspAllOfError
     */
    'links': Array<string>;
}
/**
 * 
 * @export
 * @interface ErrorRspAllOfErrorValidation
 */
export interface ErrorRspAllOfErrorValidation {
    /**
     * 
     * @type {string}
     * @memberof ErrorRspAllOfErrorValidation
     */
    'field': string;
    /**
     * 
     * @type {string}
     * @memberof ErrorRspAllOfErrorValidation
     */
    'message': string;
}
/**
 * User entry with emails and phone numbers
 * @export
 * @interface FullUser
 */
export interface FullUser {
    /**
     * ID of the user
     * @type {string}
     * @memberof FullUser
     */
    'ID': string;
    /**
     * 
     * @type {string}
     * @memberof FullUser
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof FullUser
     */
    'fullName': string;
    /**
     * Timestamp of when the entity was created in yyyy-MM-dd\'T\'HH:mm:ss format
     * @type {string}
     * @memberof FullUser
     */
    'created': string;
    /**
     * Timestamp of when the entity was last updated in yyyy-MM-dd\'T\'HH:mm:ss format
     * @type {string}
     * @memberof FullUser
     */
    'updated': string;
    /**
     * 
     * @type {Status}
     * @memberof FullUser
     */
    'status': Status;
    /**
     * 
     * @type {Array<UserEmail>}
     * @memberof FullUser
     */
    'emails': Array<UserEmail>;
    /**
     * 
     * @type {Array<UserPhoneNumber>}
     * @memberof FullUser
     */
    'phoneNumbers': Array<UserPhoneNumber>;
    /**
     * 
     * @type {Array<UserUsername>}
     * @memberof FullUser
     */
    'usernames': Array<UserUsername>;
    /**
     * 
     * @type {Array<UserSocialAccount>}
     * @memberof FullUser
     */
    'socialAccounts': Array<UserSocialAccount>;
}


/**
 * 
 * @export
 * @interface GenericRsp
 */
export interface GenericRsp {
    /**
     * HTTP status code of operation
     * @type {number}
     * @memberof GenericRsp
     */
    'httpStatusCode': number;
    /**
     * 
     * @type {string}
     * @memberof GenericRsp
     */
    'message': string;
    /**
     * 
     * @type {RequestData}
     * @memberof GenericRsp
     */
    'requestData': RequestData;
    /**
     * Runtime in seconds for this request
     * @type {number}
     * @memberof GenericRsp
     */
    'runtime': number;
}
/**
 * High entropy values from browser
 * @export
 * @interface HighEntropyValues
 */
export interface HighEntropyValues {
    /**
     * Platform
     * @type {string}
     * @memberof HighEntropyValues
     */
    'platform': string;
    /**
     * Platform version
     * @type {string}
     * @memberof HighEntropyValues
     */
    'platformVersion': string;
    /**
     * Mobile
     * @type {boolean}
     * @memberof HighEntropyValues
     */
    'mobile': boolean;
}
/**
 * Login Identifier type
 * @export
 * @enum {string}
 */

export const IdentifierType = {
    Email: 'email',
    Phone: 'phone',
    Username: 'username'
} as const;

export type IdentifierType = typeof IdentifierType[keyof typeof IdentifierType];


/**
 * 
 * @export
 * @interface LoginIdentifierConfig
 */
export interface LoginIdentifierConfig {
    /**
     * 
     * @type {IdentifierType}
     * @memberof LoginIdentifierConfig
     */
    'type': IdentifierType;
    /**
     * 
     * @type {string}
     * @memberof LoginIdentifierConfig
     */
    'enforceVerification': LoginIdentifierConfigEnforceVerificationEnum;
    /**
     * 
     * @type {boolean}
     * @memberof LoginIdentifierConfig
     */
    'useAsLoginIdentifier': boolean;
    /**
     * 
     * @type {object}
     * @memberof LoginIdentifierConfig
     */
    'metadata'?: object;
}

export const LoginIdentifierConfigEnforceVerificationEnum = {
    None: 'none',
    Signup: 'signup',
    AtFirstLogin: 'at_first_login'
} as const;

export type LoginIdentifierConfigEnforceVerificationEnum = typeof LoginIdentifierConfigEnforceVerificationEnum[keyof typeof LoginIdentifierConfigEnforceVerificationEnum];

/**
 * Login Identifier type (deprecated)
 * @export
 * @enum {string}
 */

export const LoginIdentifierType = {
    Email: 'email',
    PhoneNumber: 'phone_number',
    Custom: 'custom'
} as const;

export type LoginIdentifierType = typeof LoginIdentifierType[keyof typeof LoginIdentifierType];


/**
 * 
 * @export
 * @interface Paging
 */
export interface Paging {
    /**
     * current page returned in response
     * @type {number}
     * @memberof Paging
     */
    'page': number;
    /**
     * total number of pages available
     * @type {number}
     * @memberof Paging
     */
    'totalPages': number;
    /**
     * total number of items available
     * @type {number}
     * @memberof Paging
     */
    'totalItems': number;
}
/**
 * Data about the request itself, can be used for debugging
 * @export
 * @interface RequestData
 */
export interface RequestData {
    /**
     * Unique ID of request, you can provide your own while making the request, if not the ID will be randomly generated on server side
     * @type {string}
     * @memberof RequestData
     */
    'requestID': string;
    /**
     * Link to dashboard with details about request
     * @type {string}
     * @memberof RequestData
     */
    'link': string;
}
/**
 * What session management should be used
 * @export
 * @enum {string}
 */

export const SessionManagement = {
    SessionManagementCorbado: 'SessionManagementCorbado',
    SessionManagementOwn: 'SessionManagementOwn'
} as const;

export type SessionManagement = typeof SessionManagement[keyof typeof SessionManagement];


/**
 * 
 * @export
 * @enum {string}
 */

export const SocialProviderType = {
    Google: 'google',
    Microsoft: 'microsoft',
    Github: 'github'
} as const;

export type SocialProviderType = typeof SocialProviderType[keyof typeof SocialProviderType];


/**
 * Generic status that can describe Corbado entities
 * @export
 * @enum {string}
 */

export const Status = {
    Active: 'active',
    Pending: 'pending',
    Deleted: 'deleted'
} as const;

export type Status = typeof Status[keyof typeof Status];


/**
 * User\'s email
 * @export
 * @interface UserEmail
 */
export interface UserEmail {
    /**
     * generic ID
     * @type {string}
     * @memberof UserEmail
     */
    'ID': string;
    /**
     * 
     * @type {string}
     * @memberof UserEmail
     */
    'email': string;
    /**
     * Timestamp of when the entity was created in yyyy-MM-dd\'T\'HH:mm:ss format
     * @type {string}
     * @memberof UserEmail
     */
    'created': string;
    /**
     * Timestamp of when the entity was last updated in yyyy-MM-dd\'T\'HH:mm:ss format
     * @type {string}
     * @memberof UserEmail
     */
    'updated': string;
    /**
     * 
     * @type {Status}
     * @memberof UserEmail
     */
    'status': Status;
}


/**
 * User\'s phone number
 * @export
 * @interface UserPhoneNumber
 */
export interface UserPhoneNumber {
    /**
     * generic ID
     * @type {string}
     * @memberof UserPhoneNumber
     */
    'ID': string;
    /**
     * 
     * @type {string}
     * @memberof UserPhoneNumber
     */
    'phoneNumber': string;
    /**
     * Timestamp of when the entity was created in yyyy-MM-dd\'T\'HH:mm:ss format
     * @type {string}
     * @memberof UserPhoneNumber
     */
    'created': string;
    /**
     * Timestamp of when the entity was last updated in yyyy-MM-dd\'T\'HH:mm:ss format
     * @type {string}
     * @memberof UserPhoneNumber
     */
    'updated': string;
    /**
     * 
     * @type {Status}
     * @memberof UserPhoneNumber
     */
    'status': Status;
}


/**
 * User\'s social account
 * @export
 * @interface UserSocialAccount
 */
export interface UserSocialAccount {
    /**
     * 
     * @type {SocialProviderType}
     * @memberof UserSocialAccount
     */
    'providerType': SocialProviderType;
    /**
     * 
     * @type {string}
     * @memberof UserSocialAccount
     */
    'identifierValue': string;
    /**
     * 
     * @type {string}
     * @memberof UserSocialAccount
     */
    'avatarUrl': string;
    /**
     * 
     * @type {string}
     * @memberof UserSocialAccount
     */
    'fullName': string;
}


/**
 * User\'s username
 * @export
 * @interface UserUsername
 */
export interface UserUsername {
    /**
     * generic ID
     * @type {string}
     * @memberof UserUsername
     */
    'ID': string;
    /**
     * 
     * @type {string}
     * @memberof UserUsername
     */
    'username': string;
    /**
     * Timestamp of when the entity was created in yyyy-MM-dd\'T\'HH:mm:ss format
     * @type {string}
     * @memberof UserUsername
     */
    'created': string;
    /**
     * Timestamp of when the entity was last updated in yyyy-MM-dd\'T\'HH:mm:ss format
     * @type {string}
     * @memberof UserUsername
     */
    'updated': string;
    /**
     * 
     * @type {Status}
     * @memberof UserUsername
     */
    'status': Status;
}



/**
 * CommonApi - axios parameter creator
 * @export
 */
export const CommonApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * unused
         * @param {string} sessionID ID of session
         * @param {string} [remoteAddress] Client\&#39;s remote address
         * @param {string} [userAgent] Client\&#39;s user agent
         * @param {string} [sort] Field sorting
         * @param {Array<string>} [filter] Field filtering
         * @param {number} [page] Page number
         * @param {number} [pageSize] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unused: async (sessionID: string, remoteAddress?: string, userAgent?: string, sort?: string, filter?: Array<string>, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionID' is not null or undefined
            assertParamExists('unused', 'sessionID', sessionID)
            const localVarPath = `/unused/{sessionID}`
                .replace(`{${"sessionID"}}`, encodeURIComponent(String(sessionID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)

            if (remoteAddress !== undefined) {
                localVarQueryParameter['remoteAddress'] = remoteAddress;
            }

            if (userAgent !== undefined) {
                localVarQueryParameter['userAgent'] = userAgent;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (filter) {
                localVarQueryParameter['filter[]'] = filter;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CommonApi - functional programming interface
 * @export
 */
export const CommonApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CommonApiAxiosParamCreator(configuration)
    return {
        /**
         * unused
         * @param {string} sessionID ID of session
         * @param {string} [remoteAddress] Client\&#39;s remote address
         * @param {string} [userAgent] Client\&#39;s user agent
         * @param {string} [sort] Field sorting
         * @param {Array<string>} [filter] Field filtering
         * @param {number} [page] Page number
         * @param {number} [pageSize] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unused(sessionID: string, remoteAddress?: string, userAgent?: string, sort?: string, filter?: Array<string>, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AllTypes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unused(sessionID, remoteAddress, userAgent, sort, filter, page, pageSize, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CommonApi.unused']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * CommonApi - factory interface
 * @export
 */
export const CommonApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CommonApiFp(configuration)
    return {
        /**
         * unused
         * @param {string} sessionID ID of session
         * @param {string} [remoteAddress] Client\&#39;s remote address
         * @param {string} [userAgent] Client\&#39;s user agent
         * @param {string} [sort] Field sorting
         * @param {Array<string>} [filter] Field filtering
         * @param {number} [page] Page number
         * @param {number} [pageSize] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unused(sessionID: string, remoteAddress?: string, userAgent?: string, sort?: string, filter?: Array<string>, page?: number, pageSize?: number, options?: any): AxiosPromise<AllTypes> {
            return localVarFp.unused(sessionID, remoteAddress, userAgent, sort, filter, page, pageSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CommonApi - object-oriented interface
 * @export
 * @class CommonApi
 * @extends {BaseAPI}
 */
export class CommonApi extends BaseAPI {
    /**
     * unused
     * @param {string} sessionID ID of session
     * @param {string} [remoteAddress] Client\&#39;s remote address
     * @param {string} [userAgent] Client\&#39;s user agent
     * @param {string} [sort] Field sorting
     * @param {Array<string>} [filter] Field filtering
     * @param {number} [page] Page number
     * @param {number} [pageSize] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApi
     */
    public unused(sessionID: string, remoteAddress?: string, userAgent?: string, sort?: string, filter?: Array<string>, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return CommonApiFp(this.configuration).unused(sessionID, remoteAddress, userAgent, sort, filter, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
}



